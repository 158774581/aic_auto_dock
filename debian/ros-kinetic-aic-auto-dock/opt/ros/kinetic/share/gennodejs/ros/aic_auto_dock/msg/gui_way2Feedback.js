// Auto-generated. Do not edit!

// (in-package aic_auto_dock.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class gui_way2Feedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.err_msg = null;
      this.status = null;
      this.feedback = null;
      this.remaining_distance = null;
      this.step_process = null;
    }
    else {
      if (initObj.hasOwnProperty('err_msg')) {
        this.err_msg = initObj.err_msg
      }
      else {
        this.err_msg = 0;
      }
      if (initObj.hasOwnProperty('status')) {
        this.status = initObj.status
      }
      else {
        this.status = 0;
      }
      if (initObj.hasOwnProperty('feedback')) {
        this.feedback = initObj.feedback
      }
      else {
        this.feedback = 0;
      }
      if (initObj.hasOwnProperty('remaining_distance')) {
        this.remaining_distance = initObj.remaining_distance
      }
      else {
        this.remaining_distance = 0.0;
      }
      if (initObj.hasOwnProperty('step_process')) {
        this.step_process = initObj.step_process
      }
      else {
        this.step_process = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type gui_way2Feedback
    // Serialize message field [err_msg]
    bufferOffset = _serializer.uint64(obj.err_msg, buffer, bufferOffset);
    // Serialize message field [status]
    bufferOffset = _serializer.int32(obj.status, buffer, bufferOffset);
    // Serialize message field [feedback]
    bufferOffset = _serializer.int32(obj.feedback, buffer, bufferOffset);
    // Serialize message field [remaining_distance]
    bufferOffset = _serializer.float32(obj.remaining_distance, buffer, bufferOffset);
    // Serialize message field [step_process]
    bufferOffset = _serializer.int32(obj.step_process, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type gui_way2Feedback
    let len;
    let data = new gui_way2Feedback(null);
    // Deserialize message field [err_msg]
    data.err_msg = _deserializer.uint64(buffer, bufferOffset);
    // Deserialize message field [status]
    data.status = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [feedback]
    data.feedback = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [remaining_distance]
    data.remaining_distance = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [step_process]
    data.step_process = _deserializer.int32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 24;
  }

  static datatype() {
    // Returns string type for a message object
    return 'aic_auto_dock/gui_way2Feedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '92d80fef0082d27f007cd916743cbfcb';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    uint64              err_msg          #状态码
    
    int32               status
    int32               EXECUTING = 1
    int32               PAUSE = 2
    
    int32               feedback
    int32               OBSTACLE_AVOIDING = 10
    int32               AVOID_SUCCESS = 11
    int32               ILLEGAL_GOAL = 12
    int32               STEP_PROCESS = 13
    
    float32             remaining_distance
    int32               step_process
    int32               PREPARE_NAV_STEP = 0
    int32               PREPARE_STEP = 1
    int32               PORT_STEP = 2
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new gui_way2Feedback(null);
    if (msg.err_msg !== undefined) {
      resolved.err_msg = msg.err_msg;
    }
    else {
      resolved.err_msg = 0
    }

    if (msg.status !== undefined) {
      resolved.status = msg.status;
    }
    else {
      resolved.status = 0
    }

    if (msg.feedback !== undefined) {
      resolved.feedback = msg.feedback;
    }
    else {
      resolved.feedback = 0
    }

    if (msg.remaining_distance !== undefined) {
      resolved.remaining_distance = msg.remaining_distance;
    }
    else {
      resolved.remaining_distance = 0.0
    }

    if (msg.step_process !== undefined) {
      resolved.step_process = msg.step_process;
    }
    else {
      resolved.step_process = 0
    }

    return resolved;
    }
};

// Constants for message
gui_way2Feedback.Constants = {
  EXECUTING: 1,
  PAUSE: 2,
  OBSTACLE_AVOIDING: 10,
  AVOID_SUCCESS: 11,
  ILLEGAL_GOAL: 12,
  STEP_PROCESS: 13,
  PREPARE_NAV_STEP: 0,
  PREPARE_STEP: 1,
  PORT_STEP: 2,
}

module.exports = gui_way2Feedback;

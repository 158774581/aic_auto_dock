// Generated by gencpp from file aic_auto_dock/gui_way2Feedback.msg
// DO NOT EDIT!


#ifndef AIC_AUTO_DOCK_MESSAGE_GUI_WAY2FEEDBACK_H
#define AIC_AUTO_DOCK_MESSAGE_GUI_WAY2FEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aic_auto_dock
{
template <class ContainerAllocator>
struct gui_way2Feedback_
{
  typedef gui_way2Feedback_<ContainerAllocator> Type;

  gui_way2Feedback_()
    : err_msg(0)
    , status(0)
    , feedback(0)
    , remaining_distance(0.0)
    , step_process(0)  {
    }
  gui_way2Feedback_(const ContainerAllocator& _alloc)
    : err_msg(0)
    , status(0)
    , feedback(0)
    , remaining_distance(0.0)
    , step_process(0)  {
  (void)_alloc;
    }



   typedef uint64_t _err_msg_type;
  _err_msg_type err_msg;

   typedef int32_t _status_type;
  _status_type status;

   typedef int32_t _feedback_type;
  _feedback_type feedback;

   typedef float _remaining_distance_type;
  _remaining_distance_type remaining_distance;

   typedef int32_t _step_process_type;
  _step_process_type step_process;



  enum {
    EXECUTING = 1,
    PAUSE = 2,
    OBSTACLE_AVOIDING = 10,
    AVOID_SUCCESS = 11,
    ILLEGAL_GOAL = 12,
    STEP_PROCESS = 13,
    PREPARE_NAV_STEP = 0,
    PREPARE_STEP = 1,
    PORT_STEP = 2,
  };


  typedef boost::shared_ptr< ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> const> ConstPtr;

}; // struct gui_way2Feedback_

typedef ::aic_auto_dock::gui_way2Feedback_<std::allocator<void> > gui_way2Feedback;

typedef boost::shared_ptr< ::aic_auto_dock::gui_way2Feedback > gui_way2FeedbackPtr;
typedef boost::shared_ptr< ::aic_auto_dock::gui_way2Feedback const> gui_way2FeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aic_auto_dock

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'aic_auto_dock': ['/home/aicrobo/catkin_ws/src/aic_auto_dock/obj-x86_64-linux-gnu/devel/share/aic_auto_dock/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92d80fef0082d27f007cd916743cbfcb";
  }

  static const char* value(const ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92d80fef0082d27fULL;
  static const uint64_t static_value2 = 0x007cd916743cbfcbULL;
};

template<class ContainerAllocator>
struct DataType< ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aic_auto_dock/gui_way2Feedback";
  }

  static const char* value(const ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
uint64              err_msg          #状态码\n\
\n\
int32               status\n\
int32               EXECUTING = 1\n\
int32               PAUSE = 2\n\
\n\
int32               feedback\n\
int32               OBSTACLE_AVOIDING = 10\n\
int32               AVOID_SUCCESS = 11\n\
int32               ILLEGAL_GOAL = 12\n\
int32               STEP_PROCESS = 13\n\
\n\
float32             remaining_distance\n\
int32               step_process\n\
int32               PREPARE_NAV_STEP = 0\n\
int32               PREPARE_STEP = 1\n\
int32               PORT_STEP = 2\n\
\n\
";
  }

  static const char* value(const ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.err_msg);
      stream.next(m.status);
      stream.next(m.feedback);
      stream.next(m.remaining_distance);
      stream.next(m.step_process);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gui_way2Feedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aic_auto_dock::gui_way2Feedback_<ContainerAllocator>& v)
  {
    s << indent << "err_msg: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.err_msg);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "feedback: ";
    Printer<int32_t>::stream(s, indent + "  ", v.feedback);
    s << indent << "remaining_distance: ";
    Printer<float>::stream(s, indent + "  ", v.remaining_distance);
    s << indent << "step_process: ";
    Printer<int32_t>::stream(s, indent + "  ", v.step_process);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIC_AUTO_DOCK_MESSAGE_GUI_WAY2FEEDBACK_H

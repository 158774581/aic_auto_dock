// Generated by gencpp from file aic_auto_dock/gui_way2Goal.msg
// DO NOT EDIT!


#ifndef AIC_AUTO_DOCK_MESSAGE_GUI_WAY2GOAL_H
#define AIC_AUTO_DOCK_MESSAGE_GUI_WAY2GOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace aic_auto_dock
{
template <class ContainerAllocator>
struct gui_way2Goal_
{
  typedef gui_way2Goal_<ContainerAllocator> Type;

  gui_way2Goal_()
    : tag_no()
    , type(0)
    , pose()
    , vel_line(0.0)
    , vel_angle(0.0)
    , back_dist(0.0)
    , obstacle_dist(0.0)
    , preparePosition(0.0)
    , scale(0.0)  {
    }
  gui_way2Goal_(const ContainerAllocator& _alloc)
    : tag_no(_alloc)
    , type(0)
    , pose(_alloc)
    , vel_line(0.0)
    , vel_angle(0.0)
    , back_dist(0.0)
    , obstacle_dist(0.0)
    , preparePosition(0.0)
    , scale(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tag_no_type;
  _tag_no_type tag_no;

   typedef int32_t _type_type;
  _type_type type;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef float _vel_line_type;
  _vel_line_type vel_line;

   typedef float _vel_angle_type;
  _vel_angle_type vel_angle;

   typedef float _back_dist_type;
  _back_dist_type back_dist;

   typedef float _obstacle_dist_type;
  _obstacle_dist_type obstacle_dist;

   typedef float _preparePosition_type;
  _preparePosition_type preparePosition;

   typedef float _scale_type;
  _scale_type scale;



  enum {
    BACK = 0,
    STRAIGHT = 1,
    PAUSE = 2,
    RESUM = 3,
    INITPORT = 4,
  };


  typedef boost::shared_ptr< ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> const> ConstPtr;

}; // struct gui_way2Goal_

typedef ::aic_auto_dock::gui_way2Goal_<std::allocator<void> > gui_way2Goal;

typedef boost::shared_ptr< ::aic_auto_dock::gui_way2Goal > gui_way2GoalPtr;
typedef boost::shared_ptr< ::aic_auto_dock::gui_way2Goal const> gui_way2GoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aic_auto_dock

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'aic_auto_dock': ['/home/aicrobo/catkin_ws/src/aic_auto_dock/obj-x86_64-linux-gnu/devel/share/aic_auto_dock/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0df86edf95e2372a391a8bf1928e52fe";
  }

  static const char* value(const ::aic_auto_dock::gui_way2Goal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0df86edf95e2372aULL;
  static const uint64_t static_value2 = 0x391a8bf1928e52feULL;
};

template<class ContainerAllocator>
struct DataType< ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aic_auto_dock/gui_way2Goal";
  }

  static const char* value(const ::aic_auto_dock::gui_way2Goal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
string              tag_no\n\
int32               type\n\
geometry_msgs/Pose  pose\n\
float32             vel_line\n\
float32             vel_angle\n\
float32             back_dist\n\
float32             obstacle_dist\n\
float32             preparePosition\n\
float32             scale            #角速度响应比例，取值范围：0~0.1\n\
\n\
int32               BACK = 0\n\
int32               STRAIGHT = 1\n\
int32               PAUSE = 2\n\
int32               RESUM = 3\n\
int32               INITPORT = 4\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::aic_auto_dock::gui_way2Goal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tag_no);
      stream.next(m.type);
      stream.next(m.pose);
      stream.next(m.vel_line);
      stream.next(m.vel_angle);
      stream.next(m.back_dist);
      stream.next(m.obstacle_dist);
      stream.next(m.preparePosition);
      stream.next(m.scale);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gui_way2Goal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aic_auto_dock::gui_way2Goal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aic_auto_dock::gui_way2Goal_<ContainerAllocator>& v)
  {
    s << indent << "tag_no: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tag_no);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "vel_line: ";
    Printer<float>::stream(s, indent + "  ", v.vel_line);
    s << indent << "vel_angle: ";
    Printer<float>::stream(s, indent + "  ", v.vel_angle);
    s << indent << "back_dist: ";
    Printer<float>::stream(s, indent + "  ", v.back_dist);
    s << indent << "obstacle_dist: ";
    Printer<float>::stream(s, indent + "  ", v.obstacle_dist);
    s << indent << "preparePosition: ";
    Printer<float>::stream(s, indent + "  ", v.preparePosition);
    s << indent << "scale: ";
    Printer<float>::stream(s, indent + "  ", v.scale);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIC_AUTO_DOCK_MESSAGE_GUI_WAY2GOAL_H

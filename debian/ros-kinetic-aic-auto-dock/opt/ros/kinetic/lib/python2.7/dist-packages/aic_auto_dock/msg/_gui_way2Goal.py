# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aic_auto_dock/gui_way2Goal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class gui_way2Goal(genpy.Message):
  _md5sum = "0df86edf95e2372a391a8bf1928e52fe"
  _type = "aic_auto_dock/gui_way2Goal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
string              tag_no
int32               type
geometry_msgs/Pose  pose
float32             vel_line
float32             vel_angle
float32             back_dist
float32             obstacle_dist
float32             preparePosition
float32             scale            #角速度响应比例，取值范围：0~0.1

int32               BACK = 0
int32               STRAIGHT = 1
int32               PAUSE = 2
int32               RESUM = 3
int32               INITPORT = 4

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  BACK = 0
  STRAIGHT = 1
  PAUSE = 2
  RESUM = 3
  INITPORT = 4

  __slots__ = ['tag_no','type','pose','vel_line','vel_angle','back_dist','obstacle_dist','preparePosition','scale']
  _slot_types = ['string','int32','geometry_msgs/Pose','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tag_no,type,pose,vel_line,vel_angle,back_dist,obstacle_dist,preparePosition,scale

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gui_way2Goal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tag_no is None:
        self.tag_no = ''
      if self.type is None:
        self.type = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.vel_line is None:
        self.vel_line = 0.
      if self.vel_angle is None:
        self.vel_angle = 0.
      if self.back_dist is None:
        self.back_dist = 0.
      if self.obstacle_dist is None:
        self.obstacle_dist = 0.
      if self.preparePosition is None:
        self.preparePosition = 0.
      if self.scale is None:
        self.scale = 0.
    else:
      self.tag_no = ''
      self.type = 0
      self.pose = geometry_msgs.msg.Pose()
      self.vel_line = 0.
      self.vel_angle = 0.
      self.back_dist = 0.
      self.obstacle_dist = 0.
      self.preparePosition = 0.
      self.scale = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.tag_no
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i7d6f().pack(_x.type, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.vel_line, _x.vel_angle, _x.back_dist, _x.obstacle_dist, _x.preparePosition, _x.scale))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tag_no = str[start:end].decode('utf-8')
      else:
        self.tag_no = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.type, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.vel_line, _x.vel_angle, _x.back_dist, _x.obstacle_dist, _x.preparePosition, _x.scale,) = _get_struct_i7d6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.tag_no
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i7d6f().pack(_x.type, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.vel_line, _x.vel_angle, _x.back_dist, _x.obstacle_dist, _x.preparePosition, _x.scale))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tag_no = str[start:end].decode('utf-8')
      else:
        self.tag_no = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.type, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.vel_line, _x.vel_angle, _x.back_dist, _x.obstacle_dist, _x.preparePosition, _x.scale,) = _get_struct_i7d6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i7d6f = None
def _get_struct_i7d6f():
    global _struct_i7d6f
    if _struct_i7d6f is None:
        _struct_i7d6f = struct.Struct("<i7d6f")
    return _struct_i7d6f
